* Editing
** Shortcuts
*** Open main Org-mode file
    #+begin_src emacs-lisp
      (spacemacs/set-leader-keys "ao." (lambda () (interactive) (find-file "~/org-mode/main.org")))
    #+end_src
*** Open configs
    #+begin_src emacs-lisp
      (spacemacs/set-leader-keys "fe." (lambda () (interactive) (find-file "~/.spacemacs.d/config.org")))
    #+end_src
*** Switch magit project
    #+begin_src emacs-lisp
      (defun magit-switch-project ()
        "switch magit project"
        (interactive)
        (magit-status (ivy-read "Switch to project: " projectile-known-projects
                                :sort t
                                )))
      (spacemacs/set-leader-keys "gp" 'magit-switch-project)
    #+end_src
** COMMENT abbrev 
   #+begin_src emacs-lisp
     (setq abbrev-file-name
           "~/.emacs.d/private/abbrev_defs")
     (setq-default abbrev-mode t)
     (setq save-abbrevs 'silent)
   #+end_src
** Company
   #+begin_src emacs-lisp
     (setq company-show-numbers t)
   #+end_src
*** COMMENT [[https://github.com/TommyX12/company-tabnine][Tabnine]]
    - Use machine learning for suggestion
      #+BEGIN_SRC emacs-lisp
        (add-to-list 'company-backends #'company-tabnine)
        (setq company-idle-delay 0)
      #+END_SRC
* Apps
** Org
*** org-agenda
    #+begin_src emacs-lisp
      (setq org-angenda-files '("~/org-mode/main.org"))
    #+end_src
*** org todo keywords
    #+begin_src emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO" "DOING" "REVIEW" "|" "DONE" "CANCELED")
              (sequence "BUG" "DEBUG" "|" "SOLVED")))
    #+end_src
*** Note taking
**** Prettifier
     CLOSED: [2020-02-21 Fri 21:53]
     #+begin_src emacs-lisp
       (setq symbol-function
             '(
               ("lambda" . 955) ; λ
               ("->" . 8594)    ; →
               ("=>" . 8658)    ; ⇒
               ))

       (setq symbol-org
             '(
               ("[ ]" . 9744) ; ☐
               ("[X]" . 9746) ; ☒
               ))

       (setq symbol-fsharp
             '(("in" . ?∈)
               ("||" . ?∨) 
               ("&&" . ?∧) 
               ("not" . ?¬)

               ("fun" . ?λ)
               ("function" . ?λ)
               ("->" . ?→)
               ("<-" . ?←)
               ("=>" . ?⇒)


               ("<>" . ?≠)
               ("<=" . ?≤)
               (">=" . ?≥)

               ("|>" . ?▷)
               ("<|" . ?◁)
               ("||>" . ?⧐)
               ("<||" . ?⧏)
               (">>" . ?∘)

               ("'a" . ?α)
               ("'b" . ?β)

               ("[|" . ?⟦)
                ("|]" . ?⟧)
               ))

       (defun add-pretty (symbols)
         "Add prettier functions"
         (setq prettify-symbols-alist (append prettify-symbols-alist symbols)))

       (add-hook 'prog-mode-hook '(lambda () (add-pretty symbol-function)))
       (add-hook 'org-mode-hook '(lambda () (add-pretty symbol-org)))
       (add-hook 'fsharp-mode-hook '(lambda () (add-pretty symbol-fsharp)))
       (global-prettify-symbols-mode 1)
     #+end_src
    
**** UML
     #+begin_src emacs-lisp
       ;; tell org-mode where to find the plantuml JAR file (specify the JAR file)
       (setq org-plantuml-jar-path (expand-file-name "~/plantuml.jar"))

       ;; use plantuml as org-babel language
       (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

       ;; helper function
       (defun my-org-confirm-babel-evaluate (lang body)
         "Do not ask for confirmation to evaluate code for specified languages."
         (member lang '("plantuml")))

       ;; trust certain code as being safe
       (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

       ;; automatically show the resulting image
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
     #+end_src

*** org-roam
    #+begin_src emacs-lisp
      (add-to-list 'org-agenda-files "~/org-mode/org-roam/main.org")
      (setq org-roam-directory (file-truename "~/org-mode/org-roam/"))
      (org-roam-db-autosync-mode)
    #+end_src
** Eshell
  #+begin_src emacs-lisp
  (require 'dash)
 (require 's)

 (defmacro with-face (STR &rest PROPS)
   "Return STR propertized with PROPS."
   `(propertize ,STR 'face (list ,@PROPS)))

 (defmacro esh-section (NAME ICON FORM &rest PROPS)
   "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
   `(setq ,NAME
	   (lambda () (when ,FORM
			(-> ,ICON
			    (concat esh-section-delim ,FORM)
			    (with-face ,@PROPS))))))

 (defun esh-acc (acc x)
   "Accumulator for evaluating and concatenating esh-sections."
   (--if-let (funcall x)
	(if (s-blank? acc)
	    it
	  (concat acc esh-sep it))
     acc))

 (defun esh-prompt-func ()
   "Build `eshell-prompt-function'"
   (concat esh-header
	    (-reduce-from 'esh-acc "" eshell-funcs)
	    "\n"
	    eshell-prompt-string))



 ;; Separator between esh-sections
 (setq esh-sep " | ")  ; or " | "

 ;; Separator between an esh-section icon and form
 (setq esh-section-delim " ")

 ;; Eshell prompt header
 (setq esh-header "\n┌─")  ; or "\n┌─"

 ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
 ;; your login, these can be the same.
 (setq eshell-prompt-regexp "└─> ")   ; or "└─> "
 (setq eshell-prompt-string "└─> ")   ; or "└─> "

 (esh-section esh-dir
	       ""  ;  (faicon folder)
	       (abbreviate-file-name (eshell/pwd))
	       '(:foreground "gold" :bold ultra-bold :underline t))

 (esh-section esh-git
	       "";  (git icon)
	       (magit-get-current-branch)
	       '(:foreground "pink"))

 (esh-section esh-clock
	       "";  (clock icon)
	       (format-time-string "%H:%M" (current-time))
	       '(:foreground "forest green"))

 ;; Choose which eshell-funcs to enable
 (setq eshell-funcs (list esh-dir esh-git esh-clock))

 ;; Enable the new eshell prompt
 (setq eshell-prompt-function 'esh-prompt-func)
#+end_src
 
** Dired
*** Quick ediff
    #+begin_src emacs-lisp
      ;; -*- lexical-binding: t -*-
      (defun ora-ediff-files ()
        (interactive)
        (let ((files (dired-get-marked-files))
              (wnd (current-window-configuration)))
          (if (<= (length files) 2)
              (let ((file1 (car files))
                    (file2 (if (cdr files)
                               (cadr files)
                             (read-file-name
                              "file: "
                              (dired-dwim-target-directory)))))
                (if (file-newer-than-file-p file1 file2)
                    (ediff-files file2 file1)
                  (ediff-files file1 file2))
                (add-hook 'ediff-after-quit-hook-internal
                          (lambda ()
                            (setq ediff-after-quit-hook-internal nil)
                            (set-window-configuration wnd))))
            (error "no more than 2 files should be marked"))))

      (define-key dired-mode-map "e" 'ora-ediff-files)
    #+end_src
** EMMS
   #+begin_src emacs-lisp
     (emms-all)
     (emms-default-players)
     (setq emms-source-file-default-directory "~/Music/")

     ;; read metadata
     (setq emms-info-functions '(emms-info-tinytag))  ;; When using Tinytag
     ;;; pip install tinytag
     ;;(setq emms-info-functions '(emms-info-exiftool)) When using Exiftool

     ;; Load cover images
     (setq emms-browser-covers 'emms-browser-cache-thumbnail-async)
   #+end_src
** Language
*** Promela
   #+begin_src emacs-lisp
     (load-file "~/.spacemacs.d/elisp/promela-mode.el")
     (flycheck-define-checker promela
       "A Promela syntax checker using the Promela compiler"
       :command ("spin" "-C" source)
       :error-patterns
       ((error line-start "spin: " (file-name) ":" line ", Error: " (message) line-end))
       :modes promela-mode)
     (add-hook 'promela-mode-hook
               'company-mode
               'flycheck-mode)
     ;; (lambda () (flycheck-select-checker 'promela)) TODO FIXME
#+end_src
** Pomodoro
   #+begin_src emacs-lisp
     (defun pomodoro ()
       "Create a 25 minute timer"
       (interactive)
       (org-timer-set-timer 25)
       (run-at-time "25 min" nil #'shell-command "notify-send \"Done\""))
#+end_src
* Esthetic
** Smooth scrolling
   #+begin_src emacs-lisp 
     ;; Vertical Scroll
     (setq scroll-step 1)
     (setq scroll-margin 1)
     (setq scroll-conservatively 101)
     (setq scroll-up-aggressively 0.01)
     (setq scroll-down-aggressively 0.01)
     (setq auto-window-vscroll nil)
     (setq fast-but-imprecise-scrolling nil)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     ;; Horizontal Scroll
     (setq hscroll-step 1)
     (setq hscroll-margin 1)
   #+end_src
** COMMENT Tabs
   #+BEGIN_SRC emacs-lisp
     (centaur-tabs-mode t)
     (centaur-tabs-headline-match)
     (add-hook 'prog-mode-hook 'centaur-tabs-mode)
     (setq centaur-tabs-style "wave"
           centaur-tabs-height 32
           centaur-tabs-set-icons t
           centaur-tabs-gray-out-icons 'buffer
           centaur-tabs-set-bar 'under
           centaur-tabs-set-modified-marker t)
     (define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
     (define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
          ;;; hooks
     (add-hook 'dired-mode-hook 'centaur-tabs-local-mode)
     (centaur-tabs-group-by-projectile-project)
   #+END_SRC

** lines
   #+BEGIN_SRC emacs-lisp
     (add-hook 'visual-line-mode-hook 'adaptive-fill-mode)
   #+END_SRC

* FIX
** org-mode
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       (org-defkey org-mode-map [(meta return)] 'org-meta-return))
   #+end_src
   
   
