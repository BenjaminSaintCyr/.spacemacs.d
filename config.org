* Editing
** Apps
*** Org
**** org-agenda
    #+begin_src emacs-lisp
    (setq org-angenda-files '("~/Documents/org-mode/main.org"))
    #+end_src
**** org todo keywords
    #+begin_src emacs-lisp
    (setq org-todo-keywords
          '((sequence "TODO" "DOING" "REVIEW" "|" "DONE" "CANCELED")
            (sequence "BUG" "DEBUG" "|" "SOLVED")))
    #+end_src
**** Note taking [0/0]
***** Prettifier
      CLOSED: [2020-02-21 Fri 21:53]
      #+begin_src emacs-lisp
        (defvar pretty-alist
          (cl-pairlis '("alpha" "beta" "gamma" "delta" "epsilon" "zeta" "eta"
                        "theta" "iota" "kappa" "lambda" "mu" "nu" "xi"
                        "omicron" "pi" "rho" "sigma_final" "sigma" "tau"
                        "upsilon" "phi" "chi" "psi" "omega")
                      (mapcar
                       (lambda (x) (make-char 'greek-iso8859-7 x))
                       (number-sequence 97 121))))
        ;; add other prettifier below <-- 
        (add-to-list 'pretty-alist '("rangle" . ?\⟩))
        (add-to-list 'pretty-alist '( "->" . ?\→))
        (add-to-list 'pretty-alist '("infinity" . ?\∞))

        (defun pretty-things ()
          (mapc
           (lambda (x)
             (let ((word (car x))
                   (char (cdr x)))
               (font-lock-add-keywords
                nil
                `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[a-zA-Z]")
                    (0 (progn
                         (decompose-region (match-beginning 2) (match-end 2))
                         nil)))))
               (font-lock-add-keywords
                nil
                `((,(concat "\\(^\\|[^a-zA-Z0-9]\\)\\(" word "\\)[^a-zA-Z]")
                    (0 (progn
                         (compose-region (1- (match-beginning 2)) (match-end 2)
                          ,char)
                         nil)))))))
           pretty-alist))
          (add-hook 'prog-mode-hook 'pretty-things)
          (add-hook 'org-mode-hook 'pretty-things)
      #+end_src
     - Example:  alpha, beta, lambda, omega, theta, pi, mu, psi. phi, alpha psi
       - ->
    
***** UML
       #+begin_src emacs-lisp
    ;; tell org-mode where to find the plantuml JAR file (specify the JAR file)
   (setq org-plantuml-jar-path (expand-file-name "~/plantuml.jar"))

   ;; use plantuml as org-babel language
   (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

   ;; helper function
   (defun my-org-confirm-babel-evaluate (lang body)
   "Do not ask for confirmation to evaluate code for specified languages."
   (member lang '("plantuml")))

   ;; trust certain code as being safe
   (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

   ;; automatically show the resulting image
   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
       #+end_src
*** Eshell
      (add-to-list 'eshell-visual-commands
                   '("top" "htop"))
      (add-to-list 'eshell-visual-options
                   '("git" "--help"))
      (add-to-list 'eshell-visual-subcommands
                   '("git" "log" "diff" "show"))
*** Dired
**** Better default
**** Quick ediff
    #+begin_src emacs-lisp
      ;; -*- lexical-binding: t -*-
      (defun ora-ediff-files ()
        (interactive)
        (let ((files (dired-get-marked-files))
              (wnd (current-window-configuration)))
          (if (<= (length files) 2)
              (let ((file1 (car files))
                    (file2 (if (cdr files)
                               (cadr files)
                             (read-file-name
                              "file: "
                              (dired-dwim-target-directory)))))
                (if (file-newer-than-file-p file1 file2)
                    (ediff-files file2 file1)
                  (ediff-files file1 file2))
                (add-hook 'ediff-after-quit-hook-internal
                          (lambda ()
                            (setq ediff-after-quit-hook-internal nil)
                            (set-window-configuration wnd))))
            (error "no more than 2 files should be marked"))))

           (define-key dired-mode-map "e" 'ora-ediff-files)
    #+end_src
** Shortcuts
*** Magit shortcut
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-x g")
                    'magit-status)
    #+end_src
*** Open main Org-mode file
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-c o")
                    (lambda () (interactive) (find-file "~/Documents/org-mode/main.org")))
    #+end_src
*** Open configs
    #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-.")
                    (lambda () (interactive) (find-file "~/.emacs.d/private/config.org")))
    #+end_src
* Progress [1/4]
** TODO Prodigy
** Steam
   #+begin_src emacs-lisp
  (setq steam-username "big_benj99")
   #+end_src
** CANCELED Evil Multi-edit
   CLOSED: [2020-04-29 Wed 10:53]
     ;; (evil-multiedit-default-keybinds)
   ;; Highlights all matches of the selection in the buffer.
(define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
;; incrementally add the next unmatched match.
(define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
;; Match selected region.
(define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
;; Insert marker at point
(define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

;; Same as M-d but in reverse.
(define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
(define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)

;; OPTIONAL: If you prefer to grab symbols rather than words, use
;; `evil-multiedit-match-symbol-and-next` (or prev).

;; Restore the last group of multiedit regions.
(define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

;; RET will toggle the region under the cursor
(define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

;; ...and in visual mode, RET will disable all fields outside the selected region
(define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

;; For moving between edit regions
(define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
(define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
(define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
(define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
(evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
** DOING Counsel
   #+begin_src emacs-lisp
     (setq company-show-numbers t)
   #+end_src
** TODO Expand 
   #+begin_src emacs-lisp
   (setq abbrev-file-name
         "~/.emacs.d/private/abbrev_defs")
   (setq-default abbrev-mode t)
   (setq save-abbrevs 'silent)
   #+end_src
* Esthetic
** Smooth scrolling
#+begin_src emacs-lisp 
  ;; Vertical Scroll
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
   #+end_src
** theme
  (load-theme 'sanityinc-tomorrow-eighties t)
* FIX
** org-mode (no need)
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       (org-defkey org-mode-map [(meta return)] 'org-meta-return))
   #+end_src
   (org-adapt-indentation nil)
* TODOs
